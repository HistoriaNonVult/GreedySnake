import tkinter as tk
from PIL import Image, ImageTk
import random
import pygame
import os
import math
import time

# 初始化 pygame
pygame.mixer.init()

# 获取当前脚本所在目录
current_dir = os.path.dirname(os.path.abspath(__file__))

def initialize_high_score_file():
    """初始化最高分文件"""
    # 获取程序运行目录
    current_dir = os.path.dirname(os.path.abspath(__file__))
    high_score_path = os.path.join(current_dir, 'high_score.txt')
    
    # 如果文件不存在，创建它并初始化为0
    if not os.path.exists(high_score_path):
        try:
            with open(high_score_path, 'w') as file:
                file.write('0')
            print(f"Created high score file at: {high_score_path}")
        except Exception as e:
            print(f"Error creating high score file: {e}")

def load_high_score():
    """加载最高分，如果文件不存在则创建"""
    current_dir = os.path.dirname(os.path.abspath(__file__))
    high_score_path = os.path.join(current_dir, 'high_score.txt')
    
    try:
        # 如果文件不存在，先创建它
        if not os.path.exists(high_score_path):
            initialize_high_score_file()
            
        # 读取最高分
        with open(high_score_path, 'r') as file:
            return int(file.read())
    except Exception as e:
        print(f"Error loading high score: {e}")
        return 0

def save_high_score(score):
    """保存最高分"""
    current_dir = os.path.dirname(os.path.abspath(__file__))
    high_score_path = os.path.join(current_dir, 'high_score.txt')
    
    try:
        with open(high_score_path, 'w') as file:
            file.write(str(score))
    except Exception as e:
        print(f"Error saving high score: {e}")

# 创建开始页面类
class StartPage:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Greedy Snake")
        self.window.resizable(False, False)
        
        # 设置窗口大小和位置
        window_width = 410
        window_height = 720  # 从500改为720
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        self.window.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # 添加图标
        icon_path = os.path.join(current_dir, "assets", "images", "snake_icon.ico")
        self.window.iconbitmap(icon_path)
        
        # 创建主框架
        main_frame = tk.Frame(self.window, bg='black')
        main_frame.pack(fill='both', expand=True)
        
        # 添加标题
        title_label = tk.Label(
            main_frame,
            text="Greedy Snake",
            font=("Arial", 36, "bold"),
            fg="#4CAF50",
            bg="black"
        )
        title_label.pack(pady=30)
        
        # 使用更宽但较低的画布
        self.canvas = tk.Canvas(
            main_frame,
            width=400,  # 保持宽度
            height=400,  # 增加高度以容纳说明文本
            bg='black',
            highlightthickness=0
        )
        self.canvas.pack(pady=10)
        
        # 绑定鼠标点击事件到整个窗口
        self.window.bind("<Button-1>", self.create_firework)
        
        # 存储烟花粒子
        self.particles = []
        
        # 彩虹色列表
        self.rainbow_colors = ["#FF0000", "#FF7F00", "#FFFF00", "#00FF00", "#0000FF", "#4B0082", "#8B00FF"]
        
        # 调整两条蛇的初始位置（y坐标改为居中）
        self.snake1_pos = [(120, 45), (138, 45), (156, 45), (174, 45)]
        self.snake1_direction = "Right"
        self.snake1_colors = ["#FF69B4", "#FF1493", "#DA70D6", "#9370DB"]  # 粉紫色系
        
        self.snake2_pos = [(280, 45), (262, 45), (244, 45), (226, 45)]
        self.snake2_direction = "Left"
        self.snake2_colors = ["#4B0082", "#6A5ACD", "#483D8B", "#7B68EE"]  # 靛蓝色系
        
        # 添加方向权重
        self.directions_weight = {
            "Left": 40,
            "Right": 40,
            "Up": 10,
            "Down": 10
        }
        
        self.draw_decorative_snakes()
        self.animate_snakes()
        
        # 在画布上绘制说明文本
        self.draw_instructions()
        
        # 创建按钮框架来容纳两个按钮
        button_frame = tk.Frame(main_frame, bg='black')
        button_frame.pack(pady=20)
        
        # 添加开始按钮
        start_button = tk.Button(
            button_frame,
            text="Start Game",
            command=self.start_game,
            width=20,
            height=2,
            bg="#4CAF50",
            fg="white",
            font=("Arial", 14, "bold")
        )
        start_button.pack(pady=10)
        
        # 添加退出按钮
        quit_button = tk.Button(
            button_frame,
            text="Quit",
            command=self.window.quit,
            width=20,
            height=1,
            bg="#FF5722",
            fg="white",
            font=("Arial", 14, "bold")
        )
        quit_button.pack(pady=10)
        
    def draw_instructions(self):
        # 加载最高分
        high_score = load_high_score()
        
        # 创建渐变颜色
        def generate_rainbow_colors(steps):
            colors = []
            for i in range(steps):
                hue = i / steps
                if hue < 1/6:
                    r, g, b = 1, 6*hue, 0
                elif hue < 2/6:
                    r, g, b = 1-(6*hue-1), 1, 0
                elif hue < 3/6:
                    r, g, b = 0, 1, 6*hue-2
                elif hue < 4/6:
                    r, g, b = 0, 1-(6*hue-3), 1
                elif hue < 5/6:
                    r, g, b = 6*hue-4, 0, 1
                else:
                    r, g, b = 1, 0, 1-(6*hue-5)
                
                color = f'#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}'
                colors.append(color)
            return colors
        
        rainbow_colors = generate_rainbow_colors(20)
        
        # 绘制"Best Score:"文本
        text = "BEST SCORE: "
        # 减小基础字符宽度
        char_width = 12.3  # 从12改为10
        
        # 特殊字符间距调整
        char_spacing = {
            'r': -2,  # r后面缩进2个像素
            't': -2,  # t后面缩进2个像素
            ' ': 4,   # 空格宽度设为4个像素
        }
        
        start_x = 200 - (len(text + str(high_score)) * char_width) / 2
        current_x = start_x
        
        for i, char in enumerate(text):
            color = rainbow_colors[int((i / len(text)) * len(rainbow_colors))]
            self.canvas.create_text(
                current_x,
                150,
                text=char,
                fill=color,
                font=("Helvetica", 16, "bold"),
                anchor="w"
            )
            # 根据特殊字符调整下一个字符的位置
            current_x += char_width + char_spacing.get(char, 0)
        
        # 绘制分数
        self.canvas.create_text(
            current_x,
            150,
            text=str(high_score),
            fill="#FFD700",
            font=("Helvetica", 16, "bold"),
            anchor="w"
        )
        
        # 原有的说明文本
        instructions = """
        🎮 Instructions:

        🎯 Controls:
        • Arrow Keys or WASD to move snake
        • P to pause/continue
        • R to restart

        🍎 Food Types:
        • Normal Food (Red Square)   : +1 point
        • Golden Food (Gold Circle)  : +3 points, Speed Up
        • Special Food (Purple Star) : +5 points, Slow Down
        """
        
        self.canvas.create_text(
            200,  # x 坐标
            280,  # y 坐标（稍微向下调整，为最高分留出空间）
            text=instructions,
            fill="gold",
            font=("Helvetica", 12, "italic"),
            justify="left",
            anchor="center"
        )
    
    def draw_decorative_snakes(self):
        self.canvas.delete("snake")  # 只删除蛇
        
        # 分别绘制两条蛇
        # 绘制第一条蛇
        for i, pos in enumerate(self.snake1_pos):
            self.canvas.create_rectangle(
                pos[0], pos[1],
                pos[0] + 16, pos[1] + 16,
                fill=self.snake1_colors[i % len(self.snake1_colors)],
                outline="",
                tags="snake"
            )
        
        # 绘制第二条蛇
        for i, pos in enumerate(self.snake2_pos):
            self.canvas.create_rectangle(
                pos[0], pos[1],
                pos[0] + 16, pos[1] + 16,
                fill=self.snake2_colors[i % len(self.snake2_colors)],
                outline="",
                tags="snake"
            )
    
    def update_snake_direction(self, head_pos, current_direction):
        head_x, head_y = head_pos
        
        # 更新边界检查的范围（调整y轴范围）
        if (head_x >= 350 or head_x <= 50 or 
            head_y >= 80 or head_y <= 20):  # 调整垂直边界
            possible_directions = []
            weights = []
            
            if head_x < 350:
                possible_directions.append("Right")
                weights.append(self.directions_weight["Right"])
            if head_x > 50:
                possible_directions.append("Left")
                weights.append(self.directions_weight["Left"])
            if head_y < 80:  # 调整上边界
                possible_directions.append("Down")
                weights.append(self.directions_weight["Down"])
            if head_y > 20:  # 调整下边界
                possible_directions.append("Up")
                weights.append(self.directions_weight["Up"])
            
            if possible_directions:
                return random.choices(
                    possible_directions,
                    weights=weights,
                    k=1
                )[0]
        elif random.random() < 0.02:
            directions = list(self.directions_weight.keys())
            weights = list(self.directions_weight.values())
            return random.choices(
                directions,
                weights=weights,
                k=1
            )[0]
        
        return current_direction
    
    def animate_snakes(self):
        if not hasattr(self, 'window'):
            return
        
        # 更新两条蛇的方向和位置
        self.snake1_direction = self.update_snake_direction(
            self.snake1_pos[-1],
            self.snake1_direction
        )
        self.snake1_pos = self.move_snake(
            self.snake1_pos,
            self.snake1_direction
        )
        
        self.snake2_direction = self.update_snake_direction(
            self.snake2_pos[-1],
            self.snake2_direction
        )
        self.snake2_pos = self.move_snake(
            self.snake2_pos,
            self.snake2_direction
        )
        
        self.draw_decorative_snakes()
        self.window.after(20, self.animate_snakes)
    
    def move_snake(self, positions, direction):
        head_x, head_y = positions[-1]
        
        if direction == "Right":
            new_head = (head_x + 3, head_y)
        elif direction == "Left":
            new_head = (head_x - 3, head_y)
        elif direction == "Up":
            new_head = (head_x, head_y - 3)
        else:  # Down
            new_head = (head_x, head_y + 3)
        
        positions.append(new_head)
        positions.pop(0)
        return positions
    
    def create_firework(self, event):
        # 使用窗口坐标而不是画布坐标
        for _ in range(50):
            angle = random.uniform(0, 2 * math.pi)
            speed = random.uniform(2.0, 5.0)
            particle = {
                "x": event.x,  # 使用窗口的x坐标
                "y": event.y,  # 使用窗口的y坐标
                "speed_x": math.cos(angle) * speed,
                "speed_y": math.sin(angle) * speed,
                "color": random.choice(self.rainbow_colors),
                "size": random.randint(3, 6),
                "alpha": 1.0
            }
            self.particles.append(particle)
        
        self.animate_firework()
    
    def animate_firework(self):
        self.canvas.delete("particle")
        
        for particle in self.particles[:]:
            particle["x"] += particle["speed_x"]
            particle["y"] += particle["speed_y"]
            particle["alpha"] -= 0.02
            
            if particle["alpha"] <= 0:
                self.particles.remove(particle)
                continue
            
            # 在画布上绘制粒子，使用窗口坐标
            self.canvas.create_oval(
                particle["x"] - particle["size"] / 2,
                particle["y"] - particle["size"] / 2,
                particle["x"] + particle["size"] / 2,
                particle["y"] + particle["size"] / 2,
                fill=particle["color"],
                outline="",
                tags="particle"
            )
        
        if self.particles:
            self.canvas.after(30, self.animate_firework)
    
    def start_game(self):
        pygame.mixer.music.load(os.path.join(current_dir, "assets", "music", "background.mp3"))
        pygame.mixer.music.play(-1)  # 循环播放
        
        self.window.destroy()  # 关闭开始页面
        start_main_game()  # 启动主游戏
def start_main_game():
    # 创建主窗口
    window = tk.Tk()
    window.title("Greedy Snake")
    
    # 添加图标
    icon_path = os.path.join(current_dir, "assets", "images", "snake_icon.ico")
    window.iconbitmap(icon_path)
    
    window.resizable(False, False)
    
    # 设置游戏画布
    canvas = tk.Canvas(window, bg="black", height=400, width=400)
    canvas.pack()
    
    # 修改背景图片加载路径
    bg_image_path = os.path.join(current_dir, "assets", "images", "background.jpg")
    image = Image.open(bg_image_path)
    image = image.resize((400, 400), Image.LANCZOS)
    bg_image = ImageTk.PhotoImage(image)
    
    # 在 Canvas 上创建图像（背景）
    canvas.create_image(0, 0, anchor=tk.NW, image=bg_image)
    # 确保背景图片对象不会被垃圾回收
    canvas.bg_image = bg_image
    
    # 定义蛇的初始状态
    snake = [(20, 20), (20, 40), (20, 60)]
    snake_direction = "Down"
    
    # 修改食物相关的变量声明
    food = None  # 初始化为None
    
    # 定义游戏状态
    game_running = True
    
    # 将这些变量声明为全局变量
    game_paused = False
    current_score = 0
    snake_speed = 100
    
    # 添加粒子效果类
    class Particle:
        def __init__(self, x, y, color):
            self.x = x
            self.y = y
            self.color = color
            self.size = random.randint(3, 6)
            
            # 修改为更集中的喷射角度，模拟礼花效果
            angle = random.uniform(-math.pi, math.pi)  # 360度喷射
            speed = random.uniform(4.0, 7.0)          # 增加初始速度
            
            # 添加一些向上的初始速度，让粒子先上升
            self.speed_x = math.cos(angle) * speed
            self.speed_y = math.sin(angle) * speed - 2  # 向上的初始速度
            
            self.alpha = 1.0
            self.id = None
            self.gravity = 0.2     # 增加重力效果
            self.drag = 0.97       # 调整空气阻力
            
            # 添加闪烁效果
            self.flicker_rate = random.uniform(0.05, 0.15)
            self.base_alpha = 1.0
            self.flicker_offset = random.uniform(0, math.pi * 2)
            
            # 添加尾迹效果
            self.trail = []
            self.trail_length = 5  # 尾迹长度
    
    particles = []
    
    def create_food_effect(x, y, food_type):
        color = food.properties[food_type]['color']
        # 根据食物类型设置不同的粒子数量和效果
        particle_counts = {
            'normal': 15,   # 红色食物
            'golden': 25,   # 金色食物
            'special': 40   # 紫色食物
        }
        
        particle_count = particle_counts[food_type]
        
        # 创建粒子，从中心点爆发
        for _ in range(particle_count):
            particles.append(Particle(x + 10, y + 10, color))
    
    def update_particles():
        for particle in particles[:]:
            if particle.alpha <= 0:
                if particle.id:
                    canvas.delete(particle.id)
                    for trail_id in particle.trail:
                        canvas.delete(trail_id)
                particles.remove(particle)
                continue
                
            # 更新速度和位置
            particle.speed_y += particle.gravity
            particle.speed_x *= particle.drag
            particle.speed_y *= particle.drag
            
            # 保存前一个位置用于绘制尾迹
            old_x, old_y = particle.x, particle.y
            
            particle.x += particle.speed_x
            particle.y += particle.speed_y
            
            # 更新基础alpha值
            particle.base_alpha -= 0.02
            
            # 算闪烁效果
            flicker = math.sin(time.time() * 10 + particle.flicker_offset) * 0.3 + 0.7
            particle.alpha = max(0, min(1, particle.base_alpha * flicker))
            
            # 删除旧的粒子和尾迹
            if particle.id:
                canvas.delete(particle.id)
            for trail_id in particle.trail:
                canvas.delete(trail_id)
            
            # 绘制尾迹
            particle.trail = []
            if particle.base_alpha > 0.3:  # 只在粒子较亮时绘制尾迹
                trail_alpha = particle.alpha
                for i in range(particle.trail_length):
                    trail_x = old_x + (particle.x - old_x) * (i / particle.trail_length)
                    trail_y = old_y + (particle.y - old_y) * (i / particle.trail_length)
                    trail_size = particle.size * (0.5 + i / particle.trail_length) * particle.alpha
                    
                    trail_id = canvas.create_oval(
                        trail_x - trail_size/2,
                        trail_y - trail_size/2,
                        trail_x + trail_size/2,
                        trail_y + trail_size/2,
                        fill=particle.color,
                        stipple='gray50' if trail_alpha < 0.5 else '',
                        width=0
                    )
                    particle.trail.append(trail_id)
                    trail_alpha *= 0.6
            
            # 绘制主粒子
            current_size = particle.size * particle.alpha
            particle.id = canvas.create_oval(
                particle.x - current_size/2,
                particle.y - current_size/2,
                particle.x + current_size/2,
                particle.y + current_size/2,
                fill=particle.color,
                stipple='gray50' if particle.alpha < 0.5 else '',
                width=0
            )
    
    def toggle_pause():
        nonlocal game_paused
        game_paused = not game_paused
        
        # 无论是暂停还是继续，都重新绘制整个画面
        canvas.delete("all")  # 清除所有内容
        canvas.create_image(0, 0, anchor=tk.NW, image=bg_image)
        draw_snake()
        draw_food()
        draw_score()
        
        if not game_paused:
            move_snake()
            pause_button.config(bg="#4CAF50")
        else:
            pause_button.config(bg="#FF5722")
    
    def reset_game():
        nonlocal snake, snake_direction, food, game_running, current_score, game_paused, snake_speed
        # 在重置之前检查是否需要更新最高分
        if not game_running:
            high_score = load_high_score()
            if current_score > high_score:
                save_high_score(current_score)
    
        # 重置游戏状态
        snake = [(100, 100), (80, 100), (60, 100)]
        snake_direction = "Right"
        current_score = 0
        snake_speed = 100
        game_running = True
        game_paused = False
        generate_food()
        canvas.delete("all")
        canvas.create_image(0, 0, anchor=tk.NW, image=bg_image)
        draw_snake()
        draw_food()
        draw_score()
        canvas.create_image(0, 0, anchor=tk.NW, image=bg_image)
        generate_food()
        draw_snake()
        draw_food()
        draw_score()
        move_snake()
    
    # 然后创建按钮框架和按钮
    button_frame = tk.Frame(window)
    button_frame.pack(pady=5)
    
    pause_button = tk.Button(
        button_frame, 
        text="Pause/Continue", 
        command=toggle_pause,
        width=12,
        bg="#4CAF50",
        fg="white",
        font=("Arial", 10, "bold")
    )
    pause_button.pack(side=tk.LEFT, padx=5)
    
    restart_button = tk.Button(
        button_frame, 
        text="Restart", 
        command=reset_game,
        width=10,
        bg="#2196F3",
        fg="white",
        font=("Arial", 10, "bold")
    )
    restart_button.pack(side=tk.LEFT, padx=5)
    
    # 添加返回按钮
    def back_to_start():
        # 停止游戏音乐
        pygame.mixer.music.stop()
        window.destroy()
        start_page = StartPage()
        start_page.window.mainloop()
    
    back_button = tk.Button(
        button_frame,
        text="Back",
        command=back_to_start,
        width=8,
        bg="#FF5722",
        fg="white",
        font=("Arial", 10, "bold")
    )
    back_button.pack(side=tk.LEFT, padx=5)
    
    def draw_snake():
        # 使用渐变效果，从头到尾颜色逐渐变化
        INTP = random.randint(0, 2)
        
        color_schemes = [
            ["#FF69B4", "#FF1493", "#DA70D6"],  # 粉紫色系渐变
            ["#00CED1", "#40E0D0", "#48D1CC"],  # 青色系渐变
            ["#FFD700", "#FFA500", "#FF8C00"]   # 金橙色系渐变
        ]
        
        colors = color_schemes[INTP]  # 随机选择一种颜色方案
        
        for i, segment in enumerate(snake):
            color = colors[i % len(colors)]  # 循环使用颜色
            canvas.create_rectangle(
                segment[0], segment[1], 
                segment[0] + 20, segment[1] + 20, 
                fill=color,
                outline=""  # 移除边框使外观更平滑
            )
    
    class Food:
        def __init__(self, position, food_type):
            self.position = position
            self.food_type = food_type
            # 不同食物的属性
            self.properties = {
                'normal': {
                    'color': 'red',
                    'score': 1,
                    'effect': None,
                    'probability': 0.65  
                },
                'golden': {
                    'color': '#FFD700',  # 金色
                    'score': 3,
                    'effect': 'speed_up',
                    'probability': 0.24  
                },
                'special': {
                    'color': '#9C27B0',  # 紫色
                    'score': 5,
                    'effect': 'slow_down',
                    'probability': 0.11  
                }
            }
    
    def generate_food():
        nonlocal food  # 添加nonlocal声明
        # 随机位置
        new_position = (random.randint(0, 19) * 20, random.randint(0, 19) * 20)
        while new_position in snake:
            new_position = (random.randint(0, 19) * 20, random.randint(0, 19) * 20)
        
        # 根据概率选择食物类型
        rand = random.random()
        if rand <= 0.65:
            food_type = 'normal'
        elif rand <= 0.89:
            food_type = 'golden'
        else:
            food_type = 'special'
        
        food = Food(new_position, food_type)
    
    def draw_food():
        # 制不同类型的食物
        x, y = food.position
        color = food.properties[food.food_type]['color']
        
        if food.food_type == 'normal':
            # 普通食物是方形
            canvas.create_rectangle(x, y, x + 20, y + 20, fill=color)
        elif food.food_type == 'golden':
            # 金色食物是圆形
            canvas.create_oval(x, y, x + 20, y + 20, fill=color)
        else:
            # 特殊食物是星形（简化为菱形）
            canvas.create_polygon(
                x + 10, y,      # 上
                x + 20, y + 10, # 
                x + 10, y + 20, # 下
                x,      y + 10, # 左
                fill=color
            )
    
    def move_snake():
        nonlocal snake, food, game_running, current_score, snake_speed
        if game_paused or not game_running:
            if not game_running:
                # 检查是否创造新的最高分
                high_score = load_high_score()
                if current_score > high_score:
                    save_high_score(current_score)  # 保存新的最高分
                    canvas.create_text(
                        200, 300, 
                        text=f"New High Score: {current_score}!", 
                        fill="#FFD700", 
                        font=("Arial", 20, "bold")
                    )
                return
            return
        
        head_x, head_y = snake[-1]
        if snake_direction == "Up":
            new_head = (head_x, head_y - 20)
        elif snake_direction == "Down":
            new_head = (head_x, head_y + 20)
        elif snake_direction == "Left":
            new_head = (head_x - 20, head_y)
        elif snake_direction == "Right":
            new_head = (head_x + 20, head_y)
            
        # 检查是否撞到墙壁或自己
        if (new_head in snake or 
            new_head[0] < 0 or new_head[0] >= 400 or 
            new_head[1] < 0 or new_head[1] >= 400):
            game_running = False
            # 在游戏结束时检查并更新最高分
            high_score = load_high_score()
            if current_score > high_score:
                save_high_score(current_score)  # 保存新的最高分
                canvas.create_text(
                    200, 300, 
                    text=f"New High Score: {current_score}!", 
                    fill="#FFD700", 
                    font=("Arial", 20, "bold")
                )
            canvas.create_text(200, 200, text="Yanami Anna かわい!", fill="#FF4081", font=("Arial", 24))
            #canvas.create_text(200, 250, text=f"Final Score: {current_score}", fill="white", font=("Arial", 18))
            canvas.create_text(200, 250, text="Press R to restart", fill="white", font=("Arial", 18))
            return
            
        snake.append(new_head)
        
        # 检查是否吃到食物
        if food and new_head == food.position:
            # 创建食物效果
            create_food_effect(food.position[0], food.position[1], food.food_type)
            
            score_increase = food.properties[food.food_type]['score']
            current_score += score_increase
            
            effect = food.properties[food.food_type]['effect']
            if effect == 'speed_up':
                snake_speed = max(50, snake_speed - 10)
                show_effect_message('speed_up')
            elif effect == 'slow_down':
                snake_speed = min(150, snake_speed + 10)
                show_effect_message('slow_down')
                
            generate_food()
        else:
            snake.pop(0)
            
        # 重绘所有内容
        canvas.delete("all")
        canvas.create_image(0, 0, anchor=tk.NW, image=bg_image)
        draw_snake()
        draw_food()
        draw_score()
        
        # 更新粒子效果
        update_particles()
        
        # 确保继续移动
        window.after(snake_speed, move_snake)
    
    def change_direction(new_direction):
        nonlocal snake_direction
        if new_direction == "Up" and snake_direction != "Down":
            snake_direction = "Up"
        elif new_direction == "Down" and snake_direction != "Up":
            snake_direction = "Down"
        elif new_direction == "Left" and snake_direction != "Right":
            snake_direction = "Left"
        elif new_direction == "Right" and snake_direction != "Left":
            snake_direction = "Right"
    
    def draw_score():
        snake_length = len(snake)  # 获取蛇的长度
        # 显示长度和分数
        canvas.create_text(
            50, 11, 
            text=f"Length: {snake_length}", 
            fill="#FFC107", 
            font=("Arial", 16)
        )
        canvas.create_text(
            180, 11, 
            text=f"Score: {current_score}", 
            fill="#FFC107", 
            font=("Arial", 16)
        )
        if game_paused:
            canvas.create_text(
                210, 150, 
                text="PAUSED", 
                fill="#E91E63", 
                font=("Arial", 24)
            )
    
    def show_effect_message(effect):
        if effect == 'speed_up':
            message = "Speed Up!"
            color = "#FFD700"
        elif effect == 'slow_down':
            message = "Slow Down!"
            color = "#9C27B0"
        
        canvas.create_text(
            200, 100,
            text=message,
            fill=color,
            font=("Arial", 20, "bold"),
            tags="effect_message"
        )
        # 2秒后删除消息
        window.after(2000, lambda: canvas.delete("effect_message"))
    
    # 添加新的按键绑定
    window.bind("<Up>", lambda event: change_direction("Up"))
    window.bind("<w>", lambda event: change_direction("Up"))
    window.bind("<Down>", lambda event: change_direction("Down"))
    window.bind("<s>", lambda event: change_direction("Down"))
    window.bind("<Left>", lambda event: change_direction("Left"))
    window.bind("<a>", lambda event: change_direction("Left"))
    window.bind("<Right>", lambda event: change_direction("Right"))
    window.bind("<d>", lambda event: change_direction("Right"))
    window.bind("<p>", lambda event: toggle_pause())  # P 暂停/继续
    window.bind("<r>", lambda event: reset_game())    # R 键重新开始
    
    # 在游戏初始化部分添加
    snake_speed = 100  # 初始速度
    generate_food()    # 生成第一个食物
    draw_snake()      # 画蛇
    draw_food()       # 画食物
    draw_score()      # 显示分数
    
    # 立即开始移动蛇
    move_snake()      # 直接调用move_snake而不是使用after
    
    window.mainloop()

# 修改程序入口点
if __name__ == "__main__":
    initialize_high_score_file()  # 确保文件存在
    start_page = StartPage()
    start_page.window.mainloop()
